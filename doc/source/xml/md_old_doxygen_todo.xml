<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="md_old_doxygen_todo" kind="page">
    <compoundname>md_old_doxygen_todo</compoundname>
    <title>TODO</title>
    <detaileddescription>
<para><heading level="2">C interface</heading>
</para><para>It&apos;s easy to implement a C-interface for <computeroutput>ABCD</computeroutput>. Two files are included in <computeroutput>test/src/</computeroutput>, <computeroutput>abcd_c.h</computeroutput> and <computeroutput>c_interface.cc</computeroutput>. The C-interface is a structure called <computeroutput>abcd_solver</computeroutput> and it replicates part (only public) members of the C++ class <computeroutput>abcd</computeroutput>.</para><para><heading level="3">What&apos;s done?</heading>
</para><para>We have already defined an example in the aforementioned files, the test file is also included <computeroutput>c_test.c</computeroutput> and compiles into an executable <computeroutput>test_abcd_c_interface</computeroutput>. The <computeroutput>icntl</computeroutput> array is the only interfaced member right now, the structure looks like: <verbatim>struct abcd_solver
{
  int *icntl;
};
</verbatim></para><para>The initializing function is called <computeroutput>new_solver()</computeroutput> and returns a pointer to an allocated structure: <verbatim>struct abcd_solver* new_solver()
{
  struct abcd_solver *solver = (struct abcd_solver *)malloc(sizeof(*solver));

  obj = new abcd();

  solver-&gt;icntl = &amp;obj-&gt;icntl[0];
  // TODO: put the rest of associations here!

  return solver;
}
</verbatim></para><para>In this function we create an instance of the C++ class <computeroutput>abcd</computeroutput> and associate the pointer to the first entry in the C++ <computeroutput>icntl</computeroutput> vector to the C-array with the same name. Here is a simple working example in C <verbatim>#include &quot;abcd_c.h&quot;
//....
typedef struct abcd_solver abcd;
int i;

abcd *obj = new_solver();

for(i = 0; i &lt; 20; i++)
    printf(&quot;%d   %d\n&quot;, i, obj-&gt;icntl[i]);
</verbatim></para><para>Notice that <computeroutput>abcd</computeroutput> in this case is not related to the C++ class but to the C-structure as the C++ header is not included.</para><para><heading level="3">What&apos;s left?</heading>
</para><para>Almost everything!</para><para><itemizedlist>
<listitem><para>Add the rest of associations</para></listitem><listitem><para>Add the function call to run the solver (it should call the function <computeroutput>bc()</computeroutput>. </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
