<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="abcd_8h" kind="file">
    <compoundname>abcd.h</compoundname>
    <includes local="yes">mpi.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">numeric</includes>
    <includes local="no">vector</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">string</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">map</includes>
    <includes refid="mumps_8h" local="no">mumps.h</includes>
    <includes local="yes">dmumps_c.h</includes>
    <includes local="no">boost/mpi.hpp</includes>
    <includes local="no">boost/accumulators/statistics/mean.hpp</includes>
    <includes local="no">boost/progress.hpp</includes>
    <includes local="no">boost/lambda/lambda.hpp</includes>
    <includes local="no">boost/lambda/bind.hpp</includes>
    <includes local="no">boost/lexical_cast.hpp</includes>
    <includes local="yes">easylogging++.h</includes>
    <includes local="no">ctime</includes>
    <includes local="no">cstring</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">cctype</includes>
    <includes local="no">cwchar</includes>
    <includes local="no">functional</includes>
    <includes local="no">fstream</includes>
    <includes local="no">sstream</includes>
    <includes local="yes">compcol_double.h</includes>
    <includes local="yes">comprow_double.h</includes>
    <includes local="yes">coord_double.h</includes>
    <includes local="yes">mvm.h</includes>
    <includes refid="splib__utils_8h" local="yes">splib_utils.h</includes>
    <includes refid="defaults_8h" local="yes">defaults.h</includes>
    <includedby refid="abcd_8cpp" local="no">/home/mzenadi/projects/abcd/src/abcd.cpp</includedby>
    <includedby refid="bcg_8cpp" local="no">/home/mzenadi/projects/abcd/src/bcg.cpp</includedby>
    <includedby refid="cimmino_8cpp" local="no">/home/mzenadi/projects/abcd/src/cimmino.cpp</includedby>
    <includedby refid="comms_8cpp" local="no">/home/mzenadi/projects/abcd/src/comms.cpp</includedby>
    <includedby refid="communication_8cpp" local="no">/home/mzenadi/projects/abcd/src/communication.cpp</includedby>
    <includedby refid="define__slaves_8cpp" local="no">/home/mzenadi/projects/abcd/src/define_slaves.cpp</includedby>
    <includedby refid="analysis_8cpp" local="no">/home/mzenadi/projects/abcd/src/mumps/analysis.cpp</includedby>
    <includedby refid="augmented__systems_8cpp" local="no">/home/mzenadi/projects/abcd/src/mumps/augmented_systems.cpp</includedby>
    <includedby refid="factorization_8cpp" local="no">/home/mzenadi/projects/abcd/src/mumps/factorization.cpp</includedby>
    <includedby refid="init_8cpp" local="no">/home/mzenadi/projects/abcd/src/mumps/init.cpp</includedby>
    <includedby refid="simple__sumproject_8cpp" local="no">/home/mzenadi/projects/abcd/src/mumps/simple_sumproject.cpp</includedby>
    <includedby refid="sparse__simple__sumproject_8cpp" local="no">/home/mzenadi/projects/abcd/src/mumps/sparse_simple_sumproject.cpp</includedby>
    <includedby refid="sumproject_8cpp" local="no">/home/mzenadi/projects/abcd/src/mumps/sumproject.cpp</includedby>
    <includedby refid="aij__augment_8cpp" local="yes">/home/mzenadi/projects/abcd/src/preprocess/aij_augment.cpp</includedby>
    <includedby refid="augmentation_8cpp" local="yes">/home/mzenadi/projects/abcd/src/preprocess/augmentation.cpp</includedby>
    <includedby refid="cij__augment_8cpp" local="yes">/home/mzenadi/projects/abcd/src/preprocess/cij_augment.cpp</includedby>
    <includedby refid="scaling_8cpp" local="no">/home/mzenadi/projects/abcd/src/preprocess/scaling.cpp</includedby>
    <includedby refid="s__utils_8cpp" local="no">/home/mzenadi/projects/abcd/src/s_utils.cpp</includedby>
    <includedby refid="solve_8cpp" local="no">/home/mzenadi/projects/abcd/src/solve.cpp</includedby>
    <includedby refid="splib__utils_8cpp" local="no">/home/mzenadi/projects/abcd/src/splib_utils.cpp</includedby>
    <includedby refid="structure_8cpp" local="no">/home/mzenadi/projects/abcd/src/structure.cpp</includedby>
    <includedby refid="build_s_8cpp" local="no">/home/mzenadi/projects/abcd/src/sutils/buildS.cpp</includedby>
    <includedby refid="solve_s_8cpp" local="no">/home/mzenadi/projects/abcd/src/sutils/solveS.cpp</includedby>
    <includedby refid="logger_8cpp" local="yes">/home/mzenadi/projects/abcd/src/utils/logger.cpp</includedby>
    <includedby refid="utils_8cpp" local="no">/home/mzenadi/projects/abcd/src/utils.cpp</includedby>
    <includedby refid="worker_8cpp" local="no">/home/mzenadi/projects/abcd/src/worker.cpp</includedby>
    <incdepgraph>
      <node id="16">
        <label>boost/lambda/lambda.hpp</label>
      </node>
      <node id="25">
        <label>functional</label>
      </node>
      <node id="3">
        <label>iomanip</label>
      </node>
      <node id="18">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="19">
        <label>easylogging++.h</label>
      </node>
      <node id="11">
        <label>mumps.h</label>
        <link refid="mumps_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>stdlib.h</label>
      </node>
      <node id="17">
        <label>boost/lambda/bind.hpp</label>
      </node>
      <node id="31">
        <label>mvm.h</label>
      </node>
      <node id="24">
        <label>cwchar</label>
      </node>
      <node id="0">
        <label>/home/mzenadi/projects/abcd/include/abcd.h</label>
        <link refid="abcd.h"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>numeric</label>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="10">
        <label>map</label>
      </node>
      <node id="29">
        <label>comprow_double.h</label>
      </node>
      <node id="26">
        <label>fstream</label>
      </node>
      <node id="14">
        <label>boost/accumulators/statistics/mean.hpp</label>
      </node>
      <node id="15">
        <label>boost/progress.hpp</label>
      </node>
      <node id="33">
        <label>defaults.h</label>
        <link refid="defaults_8h"/>
      </node>
      <node id="6">
        <label>cstdio</label>
      </node>
      <node id="20">
        <label>ctime</label>
      </node>
      <node id="12">
        <label>dmumps_c.h</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="13">
        <label>boost/mpi.hpp</label>
      </node>
      <node id="27">
        <label>sstream</label>
      </node>
      <node id="30">
        <label>coord_double.h</label>
      </node>
      <node id="22">
        <label>cstdlib</label>
      </node>
      <node id="23">
        <label>cctype</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="1">
        <label>mpi.h</label>
      </node>
      <node id="28">
        <label>compcol_double.h</label>
      </node>
      <node id="7">
        <label>algorithm</label>
      </node>
      <node id="21">
        <label>cstring</label>
      </node>
      <node id="32">
        <label>splib_utils.h</label>
        <link refid="splib__utils_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="37">
        <label>/home/mzenadi/projects/abcd/src/cimmino.cpp</label>
        <link refid="cimmino_8cpp"/>
      </node>
      <node id="54">
        <label>/home/mzenadi/projects/abcd/src/splib_utils.cpp</label>
        <link refid="splib__utils_8cpp"/>
      </node>
      <node id="53">
        <label>/home/mzenadi/projects/abcd/src/solve.cpp</label>
        <link refid="solve_8cpp"/>
      </node>
      <node id="35">
        <label>/home/mzenadi/projects/abcd/src/abcd.cpp</label>
        <link refid="abcd_8cpp"/>
      </node>
      <node id="39">
        <label>/home/mzenadi/projects/abcd/src/communication.cpp</label>
        <link refid="communication_8cpp"/>
      </node>
      <node id="38">
        <label>/home/mzenadi/projects/abcd/src/comms.cpp</label>
        <link refid="comms_8cpp"/>
      </node>
      <node id="50">
        <label>/home/mzenadi/projects/abcd/src/preprocess/cij_augment.cpp</label>
        <link refid="cij__augment_8cpp"/>
      </node>
      <node id="55">
        <label>/home/mzenadi/projects/abcd/src/structure.cpp</label>
        <link refid="structure_8cpp"/>
      </node>
      <node id="47">
        <label>/home/mzenadi/projects/abcd/src/mumps/sumproject.cpp</label>
        <link refid="sumproject_8cpp"/>
      </node>
      <node id="34">
        <label>/home/mzenadi/projects/abcd/include/abcd.h</label>
        <link refid="abcd.h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>/home/mzenadi/projects/abcd/src/preprocess/scaling.cpp</label>
        <link refid="scaling_8cpp"/>
      </node>
      <node id="45">
        <label>/home/mzenadi/projects/abcd/src/mumps/simple_sumproject.cpp</label>
        <link refid="simple__sumproject_8cpp"/>
      </node>
      <node id="44">
        <label>/home/mzenadi/projects/abcd/src/mumps/init.cpp</label>
        <link refid="init_8cpp"/>
      </node>
      <node id="56">
        <label>/home/mzenadi/projects/abcd/src/sutils/buildS.cpp</label>
        <link refid="build_s_8cpp"/>
      </node>
      <node id="49">
        <label>/home/mzenadi/projects/abcd/src/preprocess/augmentation.cpp</label>
        <link refid="augmentation_8cpp"/>
      </node>
      <node id="43">
        <label>/home/mzenadi/projects/abcd/src/mumps/factorization.cpp</label>
        <link refid="factorization_8cpp"/>
      </node>
      <node id="40">
        <label>/home/mzenadi/projects/abcd/src/define_slaves.cpp</label>
        <link refid="define__slaves_8cpp"/>
      </node>
      <node id="41">
        <label>/home/mzenadi/projects/abcd/src/mumps/analysis.cpp</label>
        <link refid="analysis_8cpp"/>
      </node>
      <node id="36">
        <label>/home/mzenadi/projects/abcd/src/bcg.cpp</label>
        <link refid="bcg_8cpp"/>
      </node>
      <node id="42">
        <label>/home/mzenadi/projects/abcd/src/mumps/augmented_systems.cpp</label>
        <link refid="augmented__systems_8cpp"/>
      </node>
      <node id="52">
        <label>/home/mzenadi/projects/abcd/src/s_utils.cpp</label>
        <link refid="s__utils_8cpp"/>
      </node>
      <node id="48">
        <label>/home/mzenadi/projects/abcd/src/preprocess/aij_augment.cpp</label>
        <link refid="aij__augment_8cpp"/>
      </node>
      <node id="58">
        <label>/home/mzenadi/projects/abcd/src/utils/logger.cpp</label>
        <link refid="logger_8cpp"/>
      </node>
      <node id="60">
        <label>/home/mzenadi/projects/abcd/src/worker.cpp</label>
        <link refid="worker_8cpp"/>
      </node>
      <node id="59">
        <label>/home/mzenadi/projects/abcd/src/utils.cpp</label>
        <link refid="utils_8cpp"/>
      </node>
      <node id="57">
        <label>/home/mzenadi/projects/abcd/src/sutils/solveS.cpp</label>
        <link refid="solve_s_8cpp"/>
      </node>
      <node id="46">
        <label>/home/mzenadi/projects/abcd/src/mumps/sparse_simple_sumproject.cpp</label>
        <link refid="sparse__simple__sumproject_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classabcd" prot="public">abcd</innerclass>
    <innernamespace refid="namespaceboost">boost</innernamespace>
    <innernamespace refid="namespaceboost_1_1numeric">boost::numeric</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="abcd_8h_1a930a566fa45fefdd326401c2efb53164" prot="public" static="no">
        <name>COMPLEX</name>
        <initializer>std::complex&lt;double&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="67" column="9" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abcd_8h_1a3a3c32757077f85a0d108c0cbff65bb8" prot="public" static="no">
        <name>IRANK</name>
        <initializer>inter_comm.rank()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="77" column="9" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abcd_8h_1a86ce1665978a1c3d971cb82562b2d506" prot="public" static="no">
        <name>IBARRIER</name>
        <initializer>inter_comm.barrier()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="78" column="9" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abcd_8h_1a5fa673749ede7090fe93477fc0efc4bb" prot="public" static="no">
        <name>IFMASTER</name>
        <initializer>if(inter_comm.rank() == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="80" column="9" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abcd_8h_1a043fba147e9f9707cc6f201bedc9012b" prot="public" static="no">
        <name>TIC</name>
        <initializer>t = MPI_Wtime()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="81" column="9" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abcd_8h_1a41274c91f890aa7ffd5c2a87aee8e7be" prot="public" static="no">
        <name>TOC</name>
        <initializer>MPI_Wtime() - t</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="82" column="9" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abcd_8h_1af1994fd41de8388e8be6c528fa7591a9" prot="public" static="no">
        <name>inter_rank</name>
        <param></param>
        <initializer>inter_comm.rank()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="84" column="9" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abcd_8h_1a5ce093a26d1e61d6d736a92c60b890f8" prot="public" static="no">
        <name>inter_barrier</name>
        <param></param>
        <initializer>inter_comm.barrier()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="85" column="9" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abcd_8h_1a188b82d8e493295f9538c68f1d45a9da" prot="public" static="no">
        <name>inter_master</name>
        <param></param>
        <initializer>if(inter_comm.rank() == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="86" column="9" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abcd_8h_1ab979d9d4b4923f7c54d6caa6e1a61936" prot="public" static="no">
        <name>nullptr</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Get some goodies from C++11. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="89" column="9" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abcd_8h_1aecd0a398d18b4ade7003d6b0703bbf70" prot="public" static="no">
        <name>LLOG_</name>
        <param><defname>v</defname></param>
        <param><defname>l</defname></param>
        <initializer>LOG_IF(icntl[<ref refid="namespace_controls_1a41634ad81c9287acd66e5a0ebb45dd6ea7908c08ee866af16afb44ceafc34c654" kindref="member">Controls::verbose_level</ref>] &gt;= v, l)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="92" column="9" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abcd_8h_1a03f32d7db91dbdfbfc4324df0de98a2d" prot="public" static="no">
        <name>LINFO1</name>
        <initializer><ref refid="abcd_8h_1aecd0a398d18b4ade7003d6b0703bbf70" kindref="member">LLOG_</ref>(1, INFO)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="93" column="9" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abcd_8h_1a3680e2fb0255f53d8c1811bb93f36fa1" prot="public" static="no">
        <name>LINFO2</name>
        <initializer><ref refid="abcd_8h_1aecd0a398d18b4ade7003d6b0703bbf70" kindref="member">LLOG_</ref>(2, INFO)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="94" column="9" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abcd_8h_1a6c15b16fecb7cb45e84365c323cc981e" prot="public" static="no">
        <name>LINFO3</name>
        <initializer><ref refid="abcd_8h_1aecd0a398d18b4ade7003d6b0703bbf70" kindref="member">LLOG_</ref>(3, INFO)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="95" column="9" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abcd_8h_1a396d14bf6cbf8e706215d14fb2ab9fd4" prot="public" static="no">
        <name>LDEBUG1</name>
        <initializer><ref refid="abcd_8h_1aecd0a398d18b4ade7003d6b0703bbf70" kindref="member">LLOG_</ref>(1, DEBUG)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="96" column="9" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abcd_8h_1a3fc1edb88508ae358ced8b06c7c26087" prot="public" static="no">
        <name>LDEBUG2</name>
        <initializer><ref refid="abcd_8h_1aecd0a398d18b4ade7003d6b0703bbf70" kindref="member">LLOG_</ref>(2, DEBUG)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="97" column="9" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abcd_8h_1a811512f7b437be6fe22033afa14ecb1a" prot="public" static="no">
        <name>LDEBUG3</name>
        <initializer><ref refid="abcd_8h_1aecd0a398d18b4ade7003d6b0703bbf70" kindref="member">LLOG_</ref>(3, DEBUG)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="98" column="9" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abcd_8h_1a9ead6528f310cb6b4d6e179d68036ebe" prot="public" static="no">
        <name>LINFO</name>
        <initializer><ref refid="abcd_8h_1a03f32d7db91dbdfbfc4324df0de98a2d" kindref="member">LINFO1</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="103" column="10" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abcd_8h_1a97bfef446f67b04c653a8158b8ffbb8f" prot="public" static="no">
        <name>LDEBUG</name>
        <initializer><ref refid="abcd_8h_1a396d14bf6cbf8e706215d14fb2ab9fd4" kindref="member">LDEBUG1</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="108" column="10" bodyfile="/home/mzenadi/projects/abcd/include/abcd.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="abcd_8h_1a2c09796dd23448cf458060091893daec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void configure_logger</definition>
        <argsstring>(std::string log_file)</argsstring>
        <name>configure_logger</name>
        <param>
          <type>std::string</type>
          <declname>log_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="466" column="1" bodyfile="/home/mzenadi/projects/abcd/src/utils/logger.cpp" bodystart="37" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="abcd_8h_1aefc7b027322fca1a06c8ee40d6a88373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logger_set_filename</definition>
        <argsstring>(std::string log_file)</argsstring>
        <name>logger_set_filename</name>
        <param>
          <type>std::string</type>
          <declname>log_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="467" column="1" bodyfile="/home/mzenadi/projects/abcd/src/utils/logger.cpp" bodystart="60" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="abcd_8h_1ac832dfdd5ec260af2ae5908e45d5775d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double or_bin</definition>
        <argsstring>(double &amp;a, double &amp;b)</argsstring>
        <name>or_bin</name>
        <param>
          <type>double &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="469" column="1" bodyfile="/home/mzenadi/projects/abcd/src/utils.cpp" bodystart="208" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="abcd_8h_1a8e6eb297d5836a8959f84c0f953a1b41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; sort_indexes</definition>
        <argsstring>(const int *v, const int nb_el)</argsstring>
        <name>sort_indexes</name>
        <param>
          <type>const int *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nb_el</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/abcd.h" line="470" column="1" bodyfile="/home/mzenadi/projects/abcd/src/utils.cpp" bodystart="214" bodyend="230"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>Institut<sp/>National<sp/>Polytechnique<sp/>de<sp/>Toulouse<sp/>(2014)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Contributor(s)<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>M.<sp/>Zenadi<sp/>&lt;mzenadi@enseeiht.fr&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>D.<sp/>Ruiz<sp/>&lt;ruiz@enseeiht.fr&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>R.<sp/>Guivarch<sp/>&lt;guivarch@enseeiht.fr&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>software<sp/>is<sp/>governed<sp/>by<sp/>the<sp/>CeCILL-C<sp/>license<sp/>under<sp/>French<sp/>law<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>abiding<sp/>by<sp/>the<sp/>rules<sp/>of<sp/>distribution<sp/>of<sp/>free<sp/>software.<sp/><sp/>You<sp/>can<sp/><sp/>use,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modify<sp/>and/<sp/>or<sp/>redistribute<sp/>the<sp/>software<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>CeCILL-C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>license<sp/>as<sp/>circulated<sp/>by<sp/>CEA,<sp/>CNRS<sp/>and<sp/>INRIA<sp/>at<sp/>the<sp/>following<sp/>URL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>As<sp/>a<sp/>counterpart<sp/>to<sp/>the<sp/>access<sp/>to<sp/>the<sp/>source<sp/>code<sp/>and<sp/><sp/>rights<sp/>to<sp/>copy,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>redistribute<sp/>granted<sp/>by<sp/>the<sp/>license,<sp/>users<sp/>are<sp/>provided<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>a<sp/>limited<sp/>warranty<sp/><sp/>and<sp/>the<sp/>software&apos;s<sp/>author,<sp/><sp/>the<sp/>holder<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>economic<sp/>rights,<sp/><sp/>and<sp/>the<sp/>successive<sp/>licensors<sp/><sp/>have<sp/>only<sp/><sp/>limited</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>liability.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>respect,<sp/>the<sp/>user&apos;s<sp/>attention<sp/>is<sp/>drawn<sp/>to<sp/>the<sp/>risks<sp/>associated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>loading,<sp/><sp/>using,<sp/><sp/>modifying<sp/>and/or<sp/>developing<sp/>or<sp/>reproducing<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>by<sp/>the<sp/>user<sp/>in<sp/>light<sp/>of<sp/>its<sp/>specific<sp/>status<sp/>of<sp/>free<sp/>software,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>may<sp/>mean<sp/><sp/>that<sp/>it<sp/>is<sp/>complicated<sp/>to<sp/>manipulate,<sp/><sp/>and<sp/><sp/>that<sp/><sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>therefore<sp/>means<sp/><sp/>that<sp/>it<sp/>is<sp/>reserved<sp/>for<sp/>developers<sp/><sp/>and<sp/><sp/>experienced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>professionals<sp/>having<sp/>in-depth<sp/>computer<sp/>knowledge.<sp/>Users<sp/>are<sp/>therefore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>encouraged<sp/>to<sp/>load<sp/>and<sp/>test<sp/>the<sp/>software&apos;s<sp/>suitability<sp/>as<sp/>regards<sp/>their</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>requirements<sp/>in<sp/>conditions<sp/>enabling<sp/>the<sp/>security<sp/>of<sp/>their<sp/>systems<sp/>and/or<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>data<sp/>to<sp/>be<sp/>ensured<sp/>and,<sp/><sp/>more<sp/>generally,<sp/>to<sp/>use<sp/>and<sp/>operate<sp/>it<sp/>in<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>same<sp/>conditions<sp/>as<sp/>regards<sp/>security.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>fact<sp/>that<sp/>you<sp/>are<sp/>presently<sp/>reading<sp/>this<sp/>means<sp/>that<sp/>you<sp/>have<sp/>had</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>knowledge<sp/>of<sp/>the<sp/>CeCILL-C<sp/>license<sp/>and<sp/>that<sp/>you<sp/>accept<sp/>its<sp/>terms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ABCD_HXX_</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ABCD_HXX_</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mpi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="mumps_8h" kindref="compound">mumps.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dmumps_c.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/mpi.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/accumulators/statistics/mean.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/progress.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;boost/range/adaptors.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;boost/range/algorithm.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/lambda/lambda.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/lambda/bind.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/lexical_cast.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;easylogging++.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>A<sp/>small<sp/>hack<sp/>to<sp/>make<sp/>Sparselib++<sp/>work<sp/>with<sp/>openmpi</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>It&apos;s<sp/>however,<sp/>better<sp/>to<sp/>use<sp/>it<sp/>while<sp/>compiling<sp/>by<sp/>putting:</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>-D&quot;COMPLEX=std::complex&lt;double&gt;&quot;</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="abcd_8h_1a930a566fa45fefdd326401c2efb53164" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COMPLEX<sp/>std::complex&lt;double&gt;</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;compcol_double.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;comprow_double.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;coord_double.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mvm.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="splib__utils_8h" kindref="compound">splib_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="defaults_8h" kindref="compound">defaults.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Some<sp/>macros*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="abcd_8h_1a3a3c32757077f85a0d108c0cbff65bb8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IRANK<sp/>inter_comm.rank()</highlight></codeline>
<codeline lineno="78" refid="abcd_8h_1a86ce1665978a1c3d971cb82562b2d506" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>IBARRIER<sp/>inter_comm.barrier()</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="abcd_8h_1a5fa673749ede7090fe93477fc0efc4bb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IFMASTER<sp/>if(inter_comm.rank()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="81" refid="abcd_8h_1a043fba147e9f9707cc6f201bedc9012b" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TIC<sp/>t<sp/>=<sp/>MPI_Wtime()</highlight></codeline>
<codeline lineno="82" refid="abcd_8h_1a41274c91f890aa7ffd5c2a87aee8e7be" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TOC<sp/>MPI_Wtime()<sp/>-<sp/>t</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="abcd_8h_1af1994fd41de8388e8be6c528fa7591a9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>inter_rank()<sp/>inter_comm.rank()</highlight></codeline>
<codeline lineno="85" refid="abcd_8h_1a5ce093a26d1e61d6d736a92c60b890f8" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>inter_barrier()<sp/>inter_comm.barrier()</highlight></codeline>
<codeline lineno="86" refid="abcd_8h_1a188b82d8e493295f9538c68f1d45a9da" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>inter_master()<sp/>if(inter_comm.rank()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="89" refid="abcd_8h_1ab979d9d4b4923f7c54d6caa6e1a61936" refkind="member"><highlight class="preprocessor">#define<sp/>nullptr<sp/>0</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LINFO_</highlight></codeline>
<codeline lineno="92" refid="abcd_8h_1aecd0a398d18b4ade7003d6b0703bbf70" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LLOG_(v,<sp/>l)<sp/>LOG_IF(icntl[Controls::verbose_level]<sp/>&gt;=<sp/>v,<sp/>l)</highlight></codeline>
<codeline lineno="93" refid="abcd_8h_1a03f32d7db91dbdfbfc4324df0de98a2d" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LINFO1<sp/>LLOG_(1,<sp/>INFO)</highlight></codeline>
<codeline lineno="94" refid="abcd_8h_1a3680e2fb0255f53d8c1811bb93f36fa1" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LINFO2<sp/>LLOG_(2,<sp/>INFO)</highlight></codeline>
<codeline lineno="95" refid="abcd_8h_1a6c15b16fecb7cb45e84365c323cc981e" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LINFO3<sp/>LLOG_(3,<sp/>INFO)</highlight></codeline>
<codeline lineno="96" refid="abcd_8h_1a396d14bf6cbf8e706215d14fb2ab9fd4" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LDEBUG1<sp/>LLOG_(1,<sp/>DEBUG)</highlight></codeline>
<codeline lineno="97" refid="abcd_8h_1a3fc1edb88508ae358ced8b06c7c26087" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LDEBUG2<sp/>LLOG_(2,<sp/>DEBUG)</highlight></codeline>
<codeline lineno="98" refid="abcd_8h_1a811512f7b437be6fe22033afa14ecb1a" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LDEBUG3<sp/>LLOG_(3,<sp/>DEBUG)</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>LINFO_</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LINFO</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>LINFO</highlight></codeline>
<codeline lineno="103" refid="abcd_8h_1a9ead6528f310cb6b4d6e179d68036ebe" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LINFO<sp/>LINFO1</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/>//LINFO</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LDEBUG</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>LDEBUG</highlight></codeline>
<codeline lineno="108" refid="abcd_8h_1a97bfef446f67b04c653a8158b8ffbb8f" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LDEBUG<sp/>LDEBUG1</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>LDEBUG</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>disable<sp/>all<sp/>logging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NOLOGGING</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>LINFO</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>LINFO</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>LINFO</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>LDEBUG</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>LDEBUG</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/>//LDEBUG</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/>//NOLOGGING</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost::numeric;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost::lambda;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//using<sp/>namespace<sp/>boost::adaptors;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="classabcd" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classabcd" kindref="compound">abcd</ref></highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Matrix<sp/>information</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>**************************************************************************/</highlight></codeline>
<codeline lineno="135" refid="classabcd_1a91ae5db6180d752acf83de9d07dc0d58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classabcd_1a91ae5db6180d752acf83de9d07dc0d58" kindref="member">m</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="classabcd_1a430f5548e5969cc1f703563b92733b09" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classabcd_1a430f5548e5969cc1f703563b92733b09" kindref="member">n</ref>;<sp/></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="classabcd_1a0e652023493e13d320dd80a6b58c92ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classabcd_1a0e652023493e13d320dd80a6b58c92ef" kindref="member">nz</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="classabcd_1a21d084898cb002a8814a7be3cf849da8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classabcd_1a21d084898cb002a8814a7be3cf849da8" kindref="member">sym</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="classabcd_1a8f6403dd5d221f50c4484221b1ffae4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="classabcd_1a8f6403dd5d221f50c4484221b1ffae4a" kindref="member">irn</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="classabcd_1a56ab8a26759da48beacb9914edc97c39" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="classabcd_1a56ab8a26759da48beacb9914edc97c39" kindref="member">jcn</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="classabcd_1a47f742608fbdf5f394a68097500dc7dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="classabcd_1a47f742608fbdf5f394a68097500dc7dd" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="classabcd_1a461f8ba011adbe3ad98d5db2564fe4f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classabcd_1a461f8ba011adbe3ad98d5db2564fe4f3" kindref="member">nrhs</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="classabcd_1a6d0201d9f397728a0cb9f0504570e958" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="classabcd_1a6d0201d9f397728a0cb9f0504570e958" kindref="member">rhs</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="classabcd_1ab5028be6534dc00db080cbba9ee23bd1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="classabcd_1ab5028be6534dc00db080cbba9ee23bd1" kindref="member">sol</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>job_id);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Communication<sp/>info</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/>**************************************************************************/</highlight></codeline>
<codeline lineno="212" refid="classabcd_1a4e25bee21981dc6f6541126221d6c197" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="classabcd_1a4e25bee21981dc6f6541126221d6c197" kindref="member">icntl</ref>;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="classabcd_1afc2897e4faf4d2f2466251488123af8d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classabcd_1afc2897e4faf4d2f2466251488123af8d" kindref="member">dcntl</ref>;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="classabcd_1a692d4ed8d0b517ab5a2e044107c73ba3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="classabcd_1a692d4ed8d0b517ab5a2e044107c73ba3" kindref="member">info</ref>;</highlight></codeline>
<codeline lineno="222" refid="classabcd_1a8929be2a941d94806c90eb40a7366c9a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classabcd_1a8929be2a941d94806c90eb40a7366c9a" kindref="member">dinfo</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Write<sp/>problem<sp/>and<sp/>log</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/>**************************************************************************/</highlight></codeline>
<codeline lineno="228" refid="classabcd_1ace2325edd418de592d36d4ba3d2ee983" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classabcd_1ace2325edd418de592d36d4ba3d2ee983" kindref="member">write_problem</ref>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="classabcd_1af72a892a19a1d3eb640638d532770ce8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classabcd_1af72a892a19a1d3eb640638d532770ce8" kindref="member">write_s</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="classabcd_1a6dbfdab8785ca4e04335b514df06cf57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classabcd_1a6dbfdab8785ca4e04335b514df06cf57" kindref="member">log_output</ref>;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Partitioning<sp/>informations</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/>**************************************************************************/</highlight></codeline>
<codeline lineno="240" refid="classabcd_1ad720ae148dc7e0aa94c19d20e655c187" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="classabcd_1ad720ae148dc7e0aa94c19d20e655c187" kindref="member">strow</ref>;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="classabcd_1a8280c080e69ab33e646c33e6555b0d96" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="classabcd_1a8280c080e69ab33e646c33e6555b0d96" kindref="member">nbrows</ref>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Communication<sp/>info</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/>**************************************************************************/</highlight></codeline>
<codeline lineno="249" refid="classabcd_1aff51f4d592fcbaa9dc8777f2beaf13cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>mpi::communicator<sp/><ref refid="classabcd_1aff51f4d592fcbaa9dc8777f2beaf13cf" kindref="member">comm</ref>;<sp/></highlight></codeline>
<codeline lineno="251" refid="classabcd_1a9cff86b497cfbb74f2342ca5fe665dc4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classabcd_1a9cff86b497cfbb74f2342ca5fe665dc4" kindref="member">parallel_cg</ref>;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initializeMatrix();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>preprocessMatrix();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>factorizeAugmentedSystems();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>solveSystem();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classabcd" kindref="compound">abcd</ref>();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="classabcd" kindref="compound">abcd</ref>();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gqr(MV_ColMat_double<sp/>&amp;P,<sp/>MV_ColMat_double<sp/>&amp;AP,<sp/>MV_ColMat_double<sp/>&amp;R,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_a);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gqr(MV_ColMat_double<sp/>&amp;p,<sp/>MV_ColMat_double<sp/>&amp;ap,<sp/>MV_ColMat_double<sp/>&amp;r,<sp/>CompCol_Mat_double<sp/>g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_a);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gmgs2(MV_ColMat_double<sp/>&amp;p,<sp/>MV_ColMat_double<sp/>&amp;ap,<sp/>MV_ColMat_double<sp/>&amp;r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_a);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gmgs2(MV_ColMat_double<sp/>&amp;p,<sp/>MV_ColMat_double<sp/>&amp;ap,<sp/>MV_ColMat_double<sp/>&amp;r,<sp/>CompCol_Mat_double<sp/>g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_a);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Types<sp/>to<sp/>be<sp/>used<sp/>localy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nrmA;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nrmB;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nrmXf;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nrmMtx;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_called_job;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>preprocess<sp/>stuffs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_controls_1a41634ad81c9287acd66e5a0ebb45dd6eaccea5769b3f8da6ef81b4dc19e60f5a7" kindref="member">scaling</ref>();</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scaleMatrix(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>norm);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>diagScaleMatrix(std::vector&lt;double&gt;<sp/>&amp;<sp/>,<sp/>std::vector&lt;double&gt;<sp/>&amp;<sp/>);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>diagScaleRhs(VECTOR_double<sp/>&amp;);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>diagScaleRhs(MV_ColMat_double<sp/>&amp;);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>computeNorms();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>structure<sp/>functions</highlight></codeline>
<codeline lineno="294"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>partitionMatrix();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>analyseFrame();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instance_type;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>Build<sp/>the<sp/>augmented<sp/>version<sp/>of<sp/>the<sp/>matrix<sp/>(ABCD)</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*-----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>augmentMatrix(std::vector&lt;CompCol_Mat_double<sp/>&gt;<sp/>&amp;loc_parts);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cijAugmentMatrix(std::vector&lt;CompCol_Mat_double<sp/>&gt;<sp/>&amp;loc_parts);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>aijAugmentMatrix(std::vector&lt;CompCol_Mat_double<sp/>&gt;<sp/>&amp;loc_parts);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Communication<sp/>stuffs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>createInterComm();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>distributePartitions();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>createInterconnections();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>distributeData();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cimmino</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initializeCimmino();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>distributeRhs();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>distributeNewRhs();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bcg(MV_ColMat_double<sp/>&amp;b);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>solveABCD(MV_ColMat_double<sp/>&amp;b);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>MV_ColMat_double<sp/>solveS<sp/>(<sp/>MV_ColMat_double<sp/>&amp;f<sp/>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildS(std::vector&lt;int&gt;<sp/>&amp;rows,<sp/>std::vector&lt;int&gt;<sp/>&amp;cols,<sp/>std::vector&lt;double&gt;<sp/>&amp;vals);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildS(std::vector&lt;int&gt;<sp/>&amp;rows,<sp/>std::vector&lt;int&gt;<sp/>&amp;cols,<sp/>std::vector&lt;double&gt;<sp/>&amp;vals,<sp/>std::vector&lt;int&gt;<sp/>&amp;columns_to_build);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>Coord_Mat_double<sp/>buildS();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>Coord_Mat_double<sp/>buildS(std::vector&lt;int&gt;);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_m_u_m_p_s" kindref="compound">MUMPS</ref><sp/>buildM();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>VECTOR_double<sp/>solveM<sp/>(<sp/><ref refid="struct_m_u_m_p_s" kindref="compound">MUMPS</ref><sp/>&amp;mu,<sp/>VECTOR_double<sp/>&amp;z<sp/>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>MV_ColMat_double<sp/>prodSv(MV_ColMat_double<sp/>&amp;);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>VECTOR_double<sp/>pcgS<sp/>(<sp/>VECTOR_double<sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>selected_S_columns;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>skipped_S_columns;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>compute_rho(MV_ColMat_double<sp/>&amp;X,<sp/>MV_ColMat_double<sp/>&amp;U);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>normres;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size_c;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MUMPS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_n;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_nz;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_aug,<sp/>nz_aug;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>irn_aug,<sp/>jcn_aug;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>val_aug;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_m_u_m_p_s" kindref="compound">MUMPS</ref><sp/>mumps;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initializeMumps(<ref refid="struct_m_u_m_p_s" kindref="compound">MUMPS</ref><sp/>&amp;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>local);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initializeMumps(<ref refid="struct_m_u_m_p_s" kindref="compound">MUMPS</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>createAugmentedSystems(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;n_aug,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;nz_aug,<sp/>std::vector&lt;int&gt;<sp/>&amp;irn_aug,<sp/>std::vector&lt;int&gt;<sp/>&amp;jcn_aug,<sp/>std::vector&lt;double&gt;<sp/>&amp;val_aug);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>analyseAugmentedSystems(<ref refid="struct_m_u_m_p_s" kindref="compound">MUMPS</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>allocateMumpsSlaves(<ref refid="struct_m_u_m_p_s" kindref="compound">MUMPS</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>factorizeAugmentedSystems(<ref refid="struct_m_u_m_p_s" kindref="compound">MUMPS</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>my_slaves;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>my_master;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>MV_ColMat_double<sp/>sumProject(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha,<sp/>MV_ColMat_double<sp/>&amp;Rhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>beta,<sp/>MV_ColMat_double<sp/>&amp;X);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>MV_ColMat_double<sp/>coupleSumProject(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha,<sp/>MV_ColMat_double<sp/>&amp;Rhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>beta,<sp/>MV_ColMat_double<sp/>&amp;X,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>my_bro);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>MV_ColMat_double<sp/>simpleProject(MV_ColMat_double<sp/>&amp;X);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>MV_ColMat_double<sp/>spSimpleProject(std::vector&lt;int&gt;<sp/>mycols);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>spSimpleProject(std::vector&lt;int&gt;<sp/>mycols,<sp/>std::vector&lt;int&gt;<sp/>&amp;vrows,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>&amp;vcols,<sp/>std::vector&lt;double&gt;<sp/>&amp;vvals);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>waitForSolve();</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>comm_map;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SOme<sp/>utilities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>partitionWeights(std::vector&lt;std::vector&lt;int&gt;<sp/>&gt;<sp/>&amp;,<sp/>std::vector&lt;int&gt;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>partitioning(std::vector&lt;std::vector&lt;int&gt;<sp/>&gt;<sp/>&amp;,<sp/>std::vector&lt;int&gt;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ddot(VECTOR_double<sp/>&amp;p,<sp/>VECTOR_double<sp/>&amp;ap);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>get_nrmres(MV_ColMat_double<sp/>&amp;x,<sp/>MV_ColMat_double<sp/>&amp;b,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;nrmR,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;nrmX,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;nrmXfmX);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Scaling<sp/>information</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>drow_;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>dcol_;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>matrix<sp/>object<sp/>itself</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/><sp/><sp/><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_m_u_m_p_s" kindref="compound">MUMPS</ref><sp/>mumps_S;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>Coord_Mat_double<sp/>S;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>S_rows;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>S_cols;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>S_vals;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>S_nbrows()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_c;<sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>S_nbcols()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_c;<sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>S_nnz()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S_vals.size();<sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>CompRow_Mat_double&gt;<sp/>parts;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;CompRow_Mat_double&gt;<sp/>partitions;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;int&gt;<sp/>&gt;<sp/>p_sets;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>MV_ColMat_double<sp/>Xf;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>MV_ColMat_double<sp/>B;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>MV_ColMat_double<sp/>RRand;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>CompRow_Mat_double<sp/>A;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>row_perm;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>runSolveS;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_l,<sp/>m_l,<sp/>nz_l;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_o,<sp/>m_o,<sp/>nz_o;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>MV_ColMat_double<sp/>Xk;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_index;<sp/></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_controls_1a41634ad81c9287acd66e5a0ebb45dd6ea9a63049a2fc1a2c72a68db48bb67ee24" kindref="member">nbparts</ref>;<sp/></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_local_parts;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;int&gt;<sp/>&gt;<sp/>column_index;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::map&lt;int,int&gt;<sp/>&gt;<sp/>column_index_cache;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;int&gt;<sp/>&gt;<sp/>local_column_index;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**fast_local_column_index;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,int&gt;<sp/>glob_to_local;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Both<sp/>of<sp/>these<sp/>are<sp/>meant<sp/>to<sp/>replace<sp/>the<sp/>glob_to_local<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>glob_to_local_ind;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,int&gt;<sp/>glob_to_local_c;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;::iterator<sp/>st_c_part_it;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_c_part;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::map&lt;int,int&gt;<sp/>&gt;<sp/>glob_to_part;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::map&lt;int,int&gt;<sp/>&gt;<sp/>part_to_glob;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>stC;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_xk;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_xf;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>MV_ColMat_double<sp/>solution;<sp/></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,std::vector&lt;int&gt;<sp/>&gt;<sp/>col_interconnections;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,std::vector&lt;int&gt;<sp/>&gt;<sp/>col_inter;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>parts_id;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>logging<sp/>stuffs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verbose;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>easyloggingpp::Configurations<sp/>log_config;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>mpi::communicator<sp/>inter_comm;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>mpi::communicator<sp/>intra_comm;<sp/></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>centralizeVector(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_lda,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest_ncols,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*src,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src_lda,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src_ncols,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>globalIndex,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*scale);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal">};</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="abcd_8h_1a2c09796dd23448cf458060091893daec" kindref="member">configure_logger</ref>(std::string<sp/>log_file);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="abcd_8h_1aefc7b027322fca1a06c8ee40d6a88373" kindref="member">logger_set_filename</ref>(std::string<sp/>log_file);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="abcd_8h_1ac832dfdd5ec260af2ae5908e45d5775d" kindref="member">or_bin</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;b);</highlight></codeline>
<codeline lineno="470"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="abcd_8h_1a8e6eb297d5836a8959f84c0f953a1b41" kindref="member">sort_indexes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_el);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ABCD_HXX</highlight></codeline>
    </programlisting>
    <location file="/home/mzenadi/projects/abcd/include/abcd.h"/>
  </compounddef>
</doxygen>
