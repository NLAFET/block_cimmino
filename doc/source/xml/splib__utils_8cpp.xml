<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="splib__utils_8cpp" kind="file">
    <compoundname>splib_utils.cpp</compoundname>
    <includes refid="abcd_8h" local="no">abcd.h</includes>
    <includes local="yes">blas.h</includes>
    <incdepgraph>
      <node id="141">
        <label>/home/mzenadi/projects/abcd/src/splib_utils.cpp</label>
        <link refid="splib_utils.cpp"/>
        <childnode refid="142" relation="include">
        </childnode>
      </node>
      <node id="142">
        <label>blas.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="splib__utils_8cpp_1abe0e0888fbbe00bf5576a3a35842ef5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double infNorm</definition>
        <argsstring>(VECTOR_double &amp;V)</argsstring>
        <name>infNorm</name>
        <param>
          <type>VECTOR_double &amp;</type>
          <declname>V</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="54" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="54" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="splib__utils_8cpp_1aa0cc4ca9b09d6c78efad9a68627802b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double infNorm</definition>
        <argsstring>(MV_ColMat_double &amp;V)</argsstring>
        <name>infNorm</name>
        <param>
          <type>MV_ColMat_double &amp;</type>
          <declname>V</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="63" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="63" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="splib__utils_8cpp_1ab2c785209f07fb1eba5cefc0cddb204e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double squaredNorm</definition>
        <argsstring>(VECTOR_double &amp;V, VECTOR_int &amp;I)</argsstring>
        <name>squaredNorm</name>
        <param>
          <type>VECTOR_double &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>VECTOR_int &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="72" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="72" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="splib__utils_8cpp_1a9b4a380c5595dc5084c4434a65b85725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CompRow_Mat_double</type>
        <definition>CompRow_Mat_double CSR_middleRows</definition>
        <argsstring>(CompRow_Mat_double &amp;M, int st_row, int nb_rows)</argsstring>
        <name>CSR_middleRows</name>
        <param>
          <type>CompRow_Mat_double &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>int</type>
          <declname>st_row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nb_rows</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="82" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="82" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="splib__utils_8cpp_1ae1a1dead02b35631ade961522e1b1680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CompCol_Mat_double</type>
        <definition>CompCol_Mat_double CSC_middleRows</definition>
        <argsstring>(CompRow_Mat_double &amp;M, int st_row, int nb_rows)</argsstring>
        <name>CSC_middleRows</name>
        <param>
          <type>CompRow_Mat_double &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>int</type>
          <declname>st_row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nb_rows</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="112" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="112" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="splib__utils_8cpp_1a9ffc1f08aa424b4625d510642270d805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VECTOR_double</type>
        <definition>VECTOR_double middleCol</definition>
        <argsstring>(CompCol_Mat_double &amp;M, int col_num, VECTOR_int &amp;ind)</argsstring>
        <name>middleCol</name>
        <param>
          <type>CompCol_Mat_double &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col_num</declname>
        </param>
        <param>
          <type>VECTOR_int &amp;</type>
          <declname>ind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="116" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="116" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="splib__utils_8cpp_1a82bc42018a1f31de48709b44ef8985dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CompCol_Mat_double</type>
        <definition>CompCol_Mat_double sub_matrix</definition>
        <argsstring>(CompCol_Mat_double &amp;M, std::vector&lt; int &gt; &amp;ci)</argsstring>
        <name>sub_matrix</name>
        <param>
          <type>CompCol_Mat_double &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>ci</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="151" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="151" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="splib__utils_8cpp_1a58a53fd0e2a26cd9d01ceedf3ab82643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CompRow_Mat_double</type>
        <definition>CompRow_Mat_double spmm</definition>
        <argsstring>(CompRow_Mat_double &amp;A, CompRow_Mat_double &amp;BT)</argsstring>
        <name>spmm</name>
        <param>
          <type>CompRow_Mat_double &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>CompRow_Mat_double &amp;</type>
          <declname>BT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="220" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="220" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="splib__utils_8cpp_1a9cd60db25328649bc6fd839217b256f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CompCol_Mat_double</type>
        <definition>CompCol_Mat_double csc_transpose</definition>
        <argsstring>(CompCol_Mat_double &amp;M)</argsstring>
        <name>csc_transpose</name>
        <param>
          <type>CompCol_Mat_double &amp;</type>
          <declname>M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="286" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="286" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="splib__utils_8cpp_1a85bb383c2d036e595901511cbe7a674f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CompCol_Mat_double</type>
        <definition>CompCol_Mat_double csc_transpose</definition>
        <argsstring>(CompRow_Mat_double &amp;M)</argsstring>
        <name>csc_transpose</name>
        <param>
          <type>CompRow_Mat_double &amp;</type>
          <declname>M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="293" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="293" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="splib__utils_8cpp_1a32e83fa3657a40e24f110cccf947e28e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CompRow_Mat_double</type>
        <definition>CompRow_Mat_double csr_transpose</definition>
        <argsstring>(CompCol_Mat_double &amp;M)</argsstring>
        <name>csr_transpose</name>
        <param>
          <type>CompCol_Mat_double &amp;</type>
          <declname>M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="314" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="314" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="splib__utils_8cpp_1a0fbc2dfa59bb79f67e28a22fd0a4c3fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CompRow_Mat_double</type>
        <definition>CompRow_Mat_double csr_transpose</definition>
        <argsstring>(CompRow_Mat_double &amp;M)</argsstring>
        <name>csr_transpose</name>
        <param>
          <type>CompRow_Mat_double &amp;</type>
          <declname>M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="329" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="329" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="splib__utils_8cpp_1a423d8745f6289f20b18e9143b1cb00fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CompCol_Mat_double</type>
        <definition>CompCol_Mat_double resize_columns</definition>
        <argsstring>(CompCol_Mat_double &amp;M, int new_size)</argsstring>
        <name>resize_columns</name>
        <param>
          <type>CompCol_Mat_double &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>int</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="342" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="342" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="splib__utils_8cpp_1aa0dbb183d773929881d02c2c1641614c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CompCol_Mat_double</type>
        <definition>CompCol_Mat_double concat_columns</definition>
        <argsstring>(CompCol_Mat_double &amp;A, std::vector&lt; CompCol_Mat_double &gt; &amp;B, std::vector&lt; int &gt; st_cols)</argsstring>
        <name>concat_columns</name>
        <param>
          <type>CompCol_Mat_double &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>std::vector&lt; CompCol_Mat_double &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>st_cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="363" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="363" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="splib__utils_8cpp_1a217546c31621626c8eb05ad2883cfa2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MV_ColMat_double</type>
        <definition>MV_ColMat_double smv</definition>
        <argsstring>(CompRow_Mat_double &amp;M, MV_ColMat_double &amp;V)</argsstring>
        <name>smv</name>
        <param>
          <type>CompRow_Mat_double &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>MV_ColMat_double &amp;</type>
          <declname>V</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="421" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="421" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="splib__utils_8cpp_1a0359a150367f51c85f7ee6a7114346ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MV_ColMat_double</type>
        <definition>MV_ColMat_double spsmv</definition>
        <argsstring>(CompRow_Mat_double &amp;M, std::vector&lt; int &gt; &amp;col_ind, MV_ColMat_double &amp;V)</argsstring>
        <name>spsmv</name>
        <param>
          <type>CompRow_Mat_double &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>col_ind</declname>
        </param>
        <param>
          <type>MV_ColMat_double &amp;</type>
          <declname>V</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="442" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="442" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="splib__utils_8cpp_1acfe4867dae920089f48b51f70e0c08ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MV_ColMat_double</type>
        <definition>MV_ColMat_double gemmColMat</definition>
        <argsstring>(MV_ColMat_double &amp;L, MV_ColMat_double &amp;R)</argsstring>
        <name>gemmColMat</name>
        <param>
          <type>MV_ColMat_double &amp;</type>
          <declname>L</declname>
        </param>
        <param>
          <type>MV_ColMat_double &amp;</type>
          <declname>R</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="459" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="459" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="splib__utils_8cpp_1a69cf5b56c209aaada6f797bb23a2af62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MV_ColMat_double</type>
        <definition>MV_ColMat_double gemmColMat</definition>
        <argsstring>(MV_ColMat_double &amp;L, MV_ColMat_double &amp;R, bool transL, bool transR)</argsstring>
        <name>gemmColMat</name>
        <param>
          <type>MV_ColMat_double &amp;</type>
          <declname>L</declname>
        </param>
        <param>
          <type>MV_ColMat_double &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>transL</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>transR</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="464" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="464" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="splib__utils_8cpp_1a86f09802334491235367a2885834c0ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MV_ColMat_double</type>
        <definition>MV_ColMat_double upperMat</definition>
        <argsstring>(MV_ColMat_double &amp;M)</argsstring>
        <name>upperMat</name>
        <param>
          <type>MV_ColMat_double &amp;</type>
          <declname>M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp" line="493" column="1" bodyfile="/home/mzenadi/projects/abcd/src/splib_utils.cpp" bodystart="493" bodyend="499"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>Institut<sp/>National<sp/>Polytechnique<sp/>de<sp/>Toulouse<sp/>(2014)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Contributor(s)<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>M.<sp/>Zenadi<sp/>&lt;mzenadi@enseeiht.fr&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>D.<sp/>Ruiz<sp/>&lt;ruiz@enseeiht.fr&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>R.<sp/>Guivarch<sp/>&lt;guivarch@enseeiht.fr&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>software<sp/>is<sp/>governed<sp/>by<sp/>the<sp/>CeCILL-C<sp/>license<sp/>under<sp/>French<sp/>law<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>abiding<sp/>by<sp/>the<sp/>rules<sp/>of<sp/>distribution<sp/>of<sp/>free<sp/>software.<sp/><sp/>You<sp/>can<sp/><sp/>use,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modify<sp/>and/<sp/>or<sp/>redistribute<sp/>the<sp/>software<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>CeCILL-C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>license<sp/>as<sp/>circulated<sp/>by<sp/>CEA,<sp/>CNRS<sp/>and<sp/>INRIA<sp/>at<sp/>the<sp/>following<sp/>URL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>As<sp/>a<sp/>counterpart<sp/>to<sp/>the<sp/>access<sp/>to<sp/>the<sp/>source<sp/>code<sp/>and<sp/><sp/>rights<sp/>to<sp/>copy,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>redistribute<sp/>granted<sp/>by<sp/>the<sp/>license,<sp/>users<sp/>are<sp/>provided<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>a<sp/>limited<sp/>warranty<sp/><sp/>and<sp/>the<sp/>software&apos;s<sp/>author,<sp/><sp/>the<sp/>holder<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>economic<sp/>rights,<sp/><sp/>and<sp/>the<sp/>successive<sp/>licensors<sp/><sp/>have<sp/>only<sp/><sp/>limited</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>liability.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>respect,<sp/>the<sp/>user&apos;s<sp/>attention<sp/>is<sp/>drawn<sp/>to<sp/>the<sp/>risks<sp/>associated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>loading,<sp/><sp/>using,<sp/><sp/>modifying<sp/>and/or<sp/>developing<sp/>or<sp/>reproducing<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>by<sp/>the<sp/>user<sp/>in<sp/>light<sp/>of<sp/>its<sp/>specific<sp/>status<sp/>of<sp/>free<sp/>software,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>may<sp/>mean<sp/><sp/>that<sp/>it<sp/>is<sp/>complicated<sp/>to<sp/>manipulate,<sp/><sp/>and<sp/><sp/>that<sp/><sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>therefore<sp/>means<sp/><sp/>that<sp/>it<sp/>is<sp/>reserved<sp/>for<sp/>developers<sp/><sp/>and<sp/><sp/>experienced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>professionals<sp/>having<sp/>in-depth<sp/>computer<sp/>knowledge.<sp/>Users<sp/>are<sp/>therefore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>encouraged<sp/>to<sp/>load<sp/>and<sp/>test<sp/>the<sp/>software&apos;s<sp/>suitability<sp/>as<sp/>regards<sp/>their</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>requirements<sp/>in<sp/>conditions<sp/>enabling<sp/>the<sp/>security<sp/>of<sp/>their<sp/>systems<sp/>and/or<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>data<sp/>to<sp/>be<sp/>ensured<sp/>and,<sp/><sp/>more<sp/>generally,<sp/>to<sp/>use<sp/>and<sp/>operate<sp/>it<sp/>in<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>same<sp/>conditions<sp/>as<sp/>regards<sp/>security.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>fact<sp/>that<sp/>you<sp/>are<sp/>presently<sp/>reading<sp/>this<sp/>means<sp/>that<sp/>you<sp/>have<sp/>had</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>knowledge<sp/>of<sp/>the<sp/>CeCILL-C<sp/>license<sp/>and<sp/>that<sp/>you<sp/>accept<sp/>its<sp/>terms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>=====================================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Filename:<sp/><sp/>splib_utils.cpp</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Description:<sp/><sp/>Some<sp/>additions<sp/>to<sp/>SparseLib++</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Version:<sp/><sp/>1.0</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Created:<sp/><sp/>01/23/2013<sp/>06:47:59<sp/>PM</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Revision:<sp/><sp/>none</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compiler:<sp/><sp/>gcc</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/><sp/>YOUR<sp/>NAME<sp/>(),<sp/></highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Organization:<sp/><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>=====================================================================================</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;abcd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;blas.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>infNorm(VECTOR_double<sp/>&amp;V){</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>V.size();<sp/>i++){</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if(abs(V(i))<sp/>&gt;=<sp/>max)<sp/>max<sp/>=<sp/>abs(V(i));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>abs(V(i))<sp/>&gt;<sp/>max<sp/>?<sp/>abs(V(i))<sp/>:<sp/>max;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>infNorm(MV_ColMat_double<sp/>&amp;V){</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v_ptr<sp/>=<sp/>V.ptr();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>V.dim(0)*V.dim(1);<sp/>i++){</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(abs(v_ptr[i])<sp/>&gt;=<sp/>max)<sp/>max<sp/>=<sp/>abs(v_ptr[i]);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>squaredNorm(VECTOR_double<sp/>&amp;V,<sp/>VECTOR_int<sp/>&amp;I){</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>I.size();<sp/>i++){</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>V(I(i));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>e*e;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">CompRow_Mat_double<sp/>CSR_middleRows<sp/>(CompRow_Mat_double<sp/>&amp;M,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_row,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_rows)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_index,<sp/>ed_index;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>starting<sp/>index<sp/>in<sp/>JCN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>st_index<sp/>=<sp/>M.row_ptr(st_row);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>index<sp/>in<sp/>JCN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>ed_index<sp/>=<sp/>M.row_ptr(st_row<sp/>+<sp/>nb_rows)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>starting_point<sp/>=<sp/>M.row_ptr(st_row);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>m_row_ptr<sp/>=<sp/>M.rowptr_ptr()<sp/>+<sp/>st_row;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>sub_row_vect<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[nb_rows<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>nb_rows;<sp/>i++){</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub_row_vect[i]<sp/>=<sp/>m_row_ptr[i]<sp/>-<sp/>starting_point;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>sub_col_vect<sp/>=<sp/>M.colind_ptr()<sp/>+<sp/>st_index;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>sub_val_vect<sp/>=<sp/>M.val_ptr()<sp/>+<sp/>st_index;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>CompRow_Mat_double<sp/>nM(<sp/>nb_rows,<sp/>M.dim(1),<sp/>ed_index<sp/>-<sp/>st_index<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub_val_vect,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub_row_vect,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub_col_vect</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//delete[]<sp/>sub_col_vect,<sp/>sub_val_vect,<sp/>m_row_ptr,<sp/>sub_row_vect;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nM;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">CompCol_Mat_double<sp/>CSC_middleRows<sp/>(CompRow_Mat_double<sp/>&amp;M,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_row,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_rows)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CompCol_Mat_double(CSR_middleRows(M,<sp/>st_row,<sp/>nb_rows));</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">VECTOR_double<sp/>middleCol(CompCol_Mat_double<sp/>&amp;M,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col_num,<sp/>VECTOR_int<sp/>&amp;ind){</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_index,<sp/>ed_index;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>VECTOR_double<sp/>c(M.dim(0),<sp/>0);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>starting<sp/>index<sp/>in<sp/>JCN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>st_index<sp/>=<sp/>M.col_ptr(col_num);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>index<sp/>in<sp/>JCN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>ed_index<sp/>=<sp/>M.col_ptr(col_num<sp/>+<sp/>1)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(st_index<sp/>&gt;<sp/>ed_index)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>VECTOR_int<sp/>sub_row_vect(ed_index<sp/>-<sp/>st_index<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>sub_row_vect()<sp/>=<sp/>M.row_ind(MV_VecIndex(st_index,<sp/>ed_index));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>ind<sp/>=<sp/>sub_row_vect();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>VECTOR_double<sp/>sub_val_vect(ed_index<sp/>-<sp/>st_index<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>sub_val_vect()<sp/>=<sp/>M.val(MV_VecIndex(st_index,<sp/>ed_index));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sub_val_vect.size();<sp/>i++){</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c(sub_row_vect(i))<sp/>=<sp/>sub_val_vect(i);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/>===<sp/><sp/>FUNCTION<sp/><sp/>======================================================================</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Name:<sp/><sp/>sub_matrix</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/><sp/>Description:<sp/><sp/></highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>=====================================================================================</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>CompCol_Mat_double</highlight></codeline>
<codeline lineno="151"><highlight class="normal">sub_matrix<sp/>(<sp/>CompCol_Mat_double<sp/>&amp;M,<sp/>std::vector&lt;int&gt;<sp/>&amp;ci<sp/>)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>CompCol_Mat_double<sp/>SM;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st_col,<sp/>ed_col;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0,<sp/>nzc;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*M_col_ptr<sp/>=<sp/>M.colptr_ptr();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*M_row_ptr<sp/>=<sp/>M.rowind_ptr();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*M_val_ptr<sp/>=<sp/>M.val_ptr();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>number<sp/>of<sp/>non-zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k<sp/>&lt;<sp/>ci.size();<sp/>k++){</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>st_col<sp/>=<sp/>M_col_ptr[ci[k]];</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ed_col<sp/>=<sp/>M_col_ptr[ci[k]<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nzc<sp/>=<sp/>ed_col<sp/>-<sp/>st_col;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>column<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(st_col<sp/>==<sp/>ed_col)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>+=<sp/>nzc;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v_sm_c(ci.size()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v_sm_r(c);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>v_sm_v(c);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0;<sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>all<sp/>columns<sp/>in<sp/>ci</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k<sp/>&lt;<sp/>ci.size();<sp/>k++){</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>st_col<sp/>=<sp/>M.col_ptr(ci[k]);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ed_col<sp/>=<sp/>M.col_ptr(ci[k]<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nzc<sp/>=<sp/>ed_col<sp/>-<sp/>st_col;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>column<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(st_col<sp/>==<sp/>ed_col)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_sm_c[j]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>st_col;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>c;<sp/>i<sp/>&lt;<sp/>c<sp/>+<sp/>nzc;<sp/>++i){</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_sm_r[i]<sp/>=<sp/>M_row_ptr[pos];</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_sm_v[i]<sp/>=<sp/>M_val_ptr[pos];</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>+=<sp/>nzc;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SM;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>v_sm_c[j]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>SM<sp/>=<sp/>CompCol_Mat_double(M.dim(0),<sp/>j,<sp/>c,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;v_sm_v[0],<sp/>&amp;v_sm_r[0],<sp/>&amp;v_sm_c[0]);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SM;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>-----<sp/><sp/>end<sp/>of<sp/>function<sp/>subMatrix<sp/><sp/>-----<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>===<sp/><sp/>FUNCTION<sp/><sp/>======================================================================</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Name:<sp/><sp/>spmm</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/><sp/>Description:<sp/><sp/></highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>=====================================================================================</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>CompRow_Mat_double</highlight></codeline>
<codeline lineno="220"><highlight class="normal">spmm<sp/>(<sp/>CompRow_Mat_double<sp/>&amp;A,<sp/>CompRow_Mat_double<sp/>&amp;BT<sp/>)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CompRow_Mat_double<sp/>BT<sp/>=<sp/>csr_transpose(B);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,int&gt;<sp/>iw;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,int&gt;<sp/>jc,<sp/>ic;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,double&gt;<sp/>c;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>ic[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scal;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>ka,<sp/>kb,<sp/>j,<sp/>k,<sp/>jcol,<sp/>jpos,<sp/>len=0;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>A.dim(0);<sp/>i++){</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>ka<sp/>=<sp/>A.row_ptr(i);<sp/>ka<sp/>&lt;<sp/>A.row_ptr(i+1);<sp/>ka++){</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scal<sp/>=<sp/>A.val(ka);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>A.col_ind(ka);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(kb<sp/>=<sp/>BT.row_ptr(j);<sp/>kb<sp/>&lt;<sp/>BT.row_ptr(j+1);<sp/>kb++){</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>i-th<sp/>row<sp/>from<sp/>A<sp/>x<sp/>jcol-th<sp/>column<sp/>from<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jcol<sp/>=<sp/>BT.col_ind(kb);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iw.find(jcol)==iw.end()){</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>time!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jc[len]<sp/>=<sp/>jcol;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c[len]<sp/><sp/>=<sp/>scal*BT.val(kb);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iw[jcol]<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len++;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c[iw[jcol]]<sp/>+=<sp/>scal*BT.val(kb);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c[iw[jcol]]<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.erase(iw[jcol]);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jc.erase(iw[jcol]);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iw.erase(jcol);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len--;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iw.clear();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ic[i+1]<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>VECTOR_int<sp/>vc(len),<sp/>vr(A.dim(0)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>VECTOR_double<sp/>vv(len);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++){</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vc[i]<sp/>=<sp/>jc[i];</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vv[i]<sp/>=<sp/>c[i];</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>A.dim(0)<sp/>+<sp/>1;<sp/>i++){</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vr[i]<sp/>=<sp/>ic[i];</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>CompRow_Mat_double<sp/>C(A.dim(0),<sp/>BT.dim(1),<sp/>len,<sp/>vv,<sp/>vr,<sp/>vc);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>C;</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>-----<sp/><sp/>end<sp/>of<sp/>function<sp/>spmm<sp/><sp/>-----<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/>===<sp/><sp/>FUNCTION<sp/><sp/>======================================================================</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Name:<sp/><sp/>csc_transpose</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/><sp/>Description:<sp/><sp/></highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>=====================================================================================</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>CompCol_Mat_double</highlight></codeline>
<codeline lineno="286"><highlight class="normal">csc_transpose<sp/>(<sp/>CompCol_Mat_double<sp/>&amp;M<sp/>)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>CompRow_Mat_double<sp/>Mt<sp/>=<sp/>csr_transpose(M);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CompCol_Mat_double(Mt);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>-----<sp/><sp/>end<sp/>of<sp/>function<sp/>csc_transpose<sp/><sp/>-----<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>CompCol_Mat_double</highlight></codeline>
<codeline lineno="293"><highlight class="normal">csc_transpose<sp/>(<sp/>CompRow_Mat_double<sp/>&amp;M<sp/>)</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>VECTOR_int<sp/>vc(M.dim(0)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>VECTOR_int<sp/>vr(M.NumNonzeros());</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>VECTOR_double<sp/>vv(M.NumNonzeros());</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>vc()<sp/>=<sp/>M.row_ptr(MV_VecIndex());</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>vr()<sp/>=<sp/>M.col_ind(MV_VecIndex());</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>vv()<sp/>=<sp/>M.val(MV_VecIndex());</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CompCol_Mat_double(M.dim(1),<sp/>M.dim(0),<sp/>M.NumNonzeros(),<sp/>vv,<sp/>vr,<sp/>vc);</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>-----<sp/><sp/>end<sp/>of<sp/>function<sp/>csr_transpose<sp/><sp/>-----<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/>===<sp/><sp/>FUNCTION<sp/><sp/>======================================================================</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Name:<sp/><sp/>csr_transpose</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/><sp/>Description:<sp/><sp/></highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>=====================================================================================</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>CompRow_Mat_double</highlight></codeline>
<codeline lineno="314"><highlight class="normal">csr_transpose<sp/>(<sp/>CompCol_Mat_double<sp/>&amp;M<sp/>)</highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>VECTOR_int<sp/>vr(M.dim(1)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>VECTOR_int<sp/>vc(M.NumNonzeros());</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>VECTOR_double<sp/>vv(M.NumNonzeros());</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>vr()<sp/>=<sp/>M.col_ptr(MV_VecIndex());</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>vc()<sp/>=<sp/>M.row_ind(MV_VecIndex());</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>vv()<sp/>=<sp/>M.val(MV_VecIndex());</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CompRow_Mat_double(M.dim(1),<sp/>M.dim(0),<sp/>M.NumNonzeros(),<sp/>vv,<sp/>vr,<sp/>vc);</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>-----<sp/><sp/>end<sp/>of<sp/>function<sp/>csr_transpose<sp/><sp/>-----<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>CompRow_Mat_double</highlight></codeline>
<codeline lineno="329"><highlight class="normal">csr_transpose<sp/>(<sp/>CompRow_Mat_double<sp/>&amp;M<sp/>)</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CompRow_Mat_double(csc_transpose(M));</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>-----<sp/><sp/>end<sp/>of<sp/>function<sp/>csr_transpose<sp/><sp/>-----<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/>===<sp/><sp/>FUNCTION<sp/><sp/>======================================================================</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Name:<sp/><sp/>resize_columns</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/><sp/>Description:<sp/><sp/></highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/>=====================================================================================</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>CompCol_Mat_double</highlight></codeline>
<codeline lineno="342"><highlight class="normal">resize_columns<sp/>(<sp/>CompCol_Mat_double<sp/>&amp;M,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_size<sp/>)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_size<sp/>&lt;<sp/>M.dim(1))<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>function<sp/>only<sp/>add<sp/>empty<sp/>columns<sp/>at<sp/>the<sp/>end&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_size<sp/>==<sp/>M.dim(1)){</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>VECTOR_int<sp/>cc(new_size<sp/>+<sp/>1,<sp/>M.col_ptr(M.dim(1)));</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>cc(MV_VecIndex(0,M.dim(1)))<sp/>=<sp/>M.col_ptr(MV_VecIndex());</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CompCol_Mat_double(M.dim(0),<sp/>new_size,<sp/>M.NumNonzeros(),</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M.val(MV_VecIndex()),<sp/>M.row_ind(MV_VecIndex()),<sp/>cc);</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>-----<sp/><sp/>end<sp/>of<sp/>function<sp/>resize_columns<sp/><sp/>-----<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*<sp/>===<sp/><sp/>FUNCTION<sp/><sp/>======================================================================</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Name:<sp/><sp/>concat_columns</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*<sp/><sp/>Description:<sp/><sp/></highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/>=====================================================================================</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>CompCol_Mat_double</highlight></codeline>
<codeline lineno="363"><highlight class="normal">concat_columns<sp/>(<sp/>CompCol_Mat_double<sp/>&amp;A,<sp/>std::vector&lt;CompCol_Mat_double&gt;<sp/>&amp;B,<sp/>std::vector&lt;int&gt;<sp/>st_cols<sp/>)</highlight></codeline>
<codeline lineno="364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>st_cols.size();<sp/>++i)<sp/></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(st_cols[i]&lt;st_cols[i-1])<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>-970;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_columns<sp/>=<sp/>A.dim(1),<sp/>total_nz<sp/>=<sp/>A.NumNonzeros();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>current_column<sp/>=<sp/>A.dim(1);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>B.size();<sp/>i++){</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>st_cols[i]<sp/>&lt;<sp/>current_column<sp/>)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>-971;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_columns<sp/>+=<sp/>(st_cols[i]<sp/>-<sp/>current_column)<sp/>+<sp/>B[i].dim(1);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_nz<sp/>+=<sp/>B[i].NumNonzeros();</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_column<sp/>=<sp/>total_columns;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>VECTOR_int<sp/>cc(total_columns<sp/>+<sp/>1),<sp/>cr(total_nz);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>VECTOR_double<sp/>cv(total_nz);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>cc(MV_VecIndex(0,<sp/>A.dim(1)))<sp/>=<sp/>A.col_ptr(MV_VecIndex());</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>cr(MV_VecIndex(0,<sp/>A.NumNonzeros()<sp/>-<sp/>1))<sp/>=<sp/>A.row_ind(MV_VecIndex());</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>cv(MV_VecIndex(0,<sp/>A.NumNonzeros()<sp/>-<sp/>1))<sp/>=<sp/>A.val(MV_VecIndex());</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>current_column<sp/>=<sp/>A.dim(1);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>current_nz<sp/>=<sp/>A.NumNonzeros();</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>B.size();<sp/>i++){</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>add<sp/>the<sp/>column<sp/>after<sp/>a<sp/>blank<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(st_cols[i]<sp/>&gt;<sp/>current_column){</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>current_column;<sp/>j<sp/>&lt;<sp/>st_cols[i];<sp/>j++){</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc(j)<sp/>=<sp/>current_nz;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_column<sp/>=<sp/>st_cols[i];</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>B[i].dim(1);<sp/>j++){</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc(j<sp/>+<sp/>current_column)<sp/>=<sp/>B[i].col_ptr(j)<sp/>+<sp/>current_nz;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cr(MV_VecIndex(current_nz,<sp/>current_nz<sp/>+<sp/>B[i].NumNonzeros()<sp/>-1))<sp/>=<sp/>B[i].row_ind(MV_VecIndex());</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv(MV_VecIndex(current_nz,<sp/>current_nz<sp/>+<sp/>B[i].NumNonzeros()<sp/>-1))<sp/>=<sp/>B[i].val(MV_VecIndex());</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_column<sp/>+=<sp/>B[i].dim(1);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_nz<sp/>+=<sp/>B[i].NumNonzeros();</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>cc(total_columns)<sp/>=<sp/>current_nz;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CompCol_Mat_double(A.dim(0),<sp/>total_columns,<sp/>total_nz,<sp/>cv,<sp/>cr,<sp/>cc);</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>-----<sp/><sp/>end<sp/>of<sp/>function<sp/>concat_columns<sp/><sp/>-----<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*<sp/>===<sp/><sp/>FUNCTION<sp/><sp/>======================================================================</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Name:<sp/><sp/>smv</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*<sp/><sp/>Description:<sp/><sp/></highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*<sp/>=====================================================================================</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>MV_ColMat_double<sp/></highlight></codeline>
<codeline lineno="421"><highlight class="normal">smv<sp/>(<sp/>CompRow_Mat_double<sp/>&amp;M,<sp/>MV_ColMat_double<sp/>&amp;V<sp/>)</highlight></codeline>
<codeline lineno="422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(M.dim(1)<sp/>==<sp/>V.dim(0));</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::vector&lt;VECTOR_double&gt;<sp/>R;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>MV_ColMat_double<sp/>R(M.dim(0),<sp/>V.dim(1));</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>V.dim(1);<sp/>k++){</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MV_Vector_double<sp/>t<sp/>=<sp/>M*V(k);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//R.push_back(<sp/>M*V[k]<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R.setCol(t,<sp/>k);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>R;</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>-----<sp/><sp/>end<sp/>of<sp/>function<sp/>smdm<sp/><sp/>-----<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*<sp/>===<sp/><sp/>FUNCTION<sp/><sp/>======================================================================</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Name:<sp/><sp/>spsmv</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*<sp/><sp/>Description:<sp/><sp/></highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*<sp/>=====================================================================================</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>MV_ColMat_double</highlight></codeline>
<codeline lineno="442"><highlight class="normal">spsmv<sp/>(<sp/>CompRow_Mat_double<sp/>&amp;M,<sp/>std::vector&lt;int&gt;<sp/>&amp;col_ind,<sp/>MV_ColMat_double<sp/>&amp;V<sp/>)</highlight></codeline>
<codeline lineno="443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>MV_ColMat_double<sp/>V_(M.dim(1),<sp/>V.dim(1));</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>V_.dim(1);<sp/>j++){</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>V_.dim(0);<sp/>i++){</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V_(i,j)<sp/>=<sp/>V(col_ind[i],<sp/>j);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>MV_ColMat_double<sp/>R(M.dim(0),<sp/>V.dim(1));</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>V.dim(1);<sp/>k++){</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MV_Vector_double<sp/>t<sp/>=<sp/>M*V_(k);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R.setCol(t,<sp/>k);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>R;</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>-----<sp/><sp/>end<sp/>of<sp/>function<sp/>spsmv<sp/><sp/>-----<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal">MV_ColMat_double<sp/>gemmColMat(MV_ColMat_double<sp/>&amp;L,<sp/>MV_ColMat_double<sp/>&amp;R)</highlight></codeline>
<codeline lineno="460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gemmColMat(L,<sp/>R,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal">MV_ColMat_double<sp/>gemmColMat(MV_ColMat_double<sp/>&amp;L,<sp/>MV_ColMat_double<sp/>&amp;R,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>transL,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>transR)</highlight></codeline>
<codeline lineno="465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(L.dim(1)<sp/>==<sp/><sp/>R.dim(0));</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>MV_ColMat_double<sp/>C(L.dim(0),<sp/>R.dim(1));</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ierr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>no<sp/>=<sp/></highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>trans<sp/>=<sp/>&apos;T&apos;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tL<sp/>=<sp/>transL<sp/>?<sp/></highlight><highlight class="charliteral">&apos;T&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tR<sp/>=<sp/>transR<sp/>?<sp/></highlight><highlight class="charliteral">&apos;T&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha,<sp/>beta;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>beta<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*l_ptr<sp/>=<sp/>L.ptr();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*r_ptr<sp/>=<sp/>R.ptr();</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*c_ptr<sp/>=<sp/>C.ptr();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rA<sp/>=<sp/>L.dim(0);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cA<sp/>=<sp/>L.dim(1);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rB<sp/>=<sp/>R.dim(0);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cB<sp/>=<sp/>R.dim(1);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>dgemm_(&amp;tL,<sp/>&amp;tR,<sp/>&amp;rA,<sp/>&amp;cB,<sp/>&amp;cA,<sp/>&amp;alpha,<sp/>l_ptr,<sp/>&amp;rA,<sp/>r_ptr,<sp/>&amp;rB,<sp/>&amp;beta,<sp/>c_ptr,<sp/>&amp;rA);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>C;</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal">MV_ColMat_double<sp/>upperMat(MV_ColMat_double<sp/>&amp;M){</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>MV_ColMat_double<sp/>R<sp/>=<sp/>M;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>M.dim(0);<sp/>i++)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++)</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R(i,j)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>R;</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/mzenadi/projects/abcd/src/splib_utils.cpp"/>
  </compounddef>
</doxygen>
