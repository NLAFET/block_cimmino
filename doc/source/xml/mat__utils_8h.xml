<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="mat__utils_8h" kind="file">
    <compoundname>mat_utils.h</compoundname>
    <includes local="no">vector</includes>
    <includedby refid="structure_8cpp" local="yes">/home/mzenadi/projects/abcd/src/structure.cpp</includedby>
    <includedby refid="utils_8cpp" local="yes">/home/mzenadi/projects/abcd/src/utils.cpp</includedby>
    <incdepgraph>
      <node id="90">
        <label>/home/mzenadi/projects/abcd/include/mat_utils.h</label>
        <link refid="mat_utils.h"/>
        <childnode refid="91" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="93">
        <label>/home/mzenadi/projects/abcd/src/structure.cpp</label>
        <link refid="structure_8cpp"/>
      </node>
      <node id="92">
        <label>/home/mzenadi/projects/abcd/include/mat_utils.h</label>
        <link refid="mat_utils.h"/>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>/home/mzenadi/projects/abcd/src/utils.cpp</label>
        <link refid="utils_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="mat__utils_8h_1a79b0ce19f3f9d68c250f2f4fcd438284" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void csr_tocsc</definition>
        <argsstring>(const I n_row, const I n_col, const I Ap[], const I Aj[], const T Ax[], I Bp[], I Bi[], T Bx[])</argsstring>
        <name>csr_tocsc</name>
        <param>
          <type>const I</type>
          <declname>n_row</declname>
        </param>
        <param>
          <type>const I</type>
          <declname>n_col</declname>
        </param>
        <param>
          <type>const I</type>
          <declname>Ap</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const I</type>
          <declname>Aj</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const T</type>
          <declname>Ax</declname>
          <array>[]</array>
        </param>
        <param>
          <type>I</type>
          <declname>Bp</declname>
          <array>[]</array>
        </param>
        <param>
          <type>I</type>
          <declname>Bi</declname>
          <array>[]</array>
        </param>
        <param>
          <type>T</type>
          <declname>Bx</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mzenadi/projects/abcd/include/mat_utils.h" line="7" column="1" bodyfile="/home/mzenadi/projects/abcd/include/mat_utils.h" bodystart="7" bodyend="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>MAT_UTILS_HXX_</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MAT_UTILS_HXX_</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="7" refid="mat__utils_8h_1a79b0ce19f3f9d68c250f2f4fcd438284" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mat__utils_8h_1a79b0ce19f3f9d68c250f2f4fcd438284" kindref="member">csr_tocsc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I<sp/>n_row,</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I<sp/>n_col,</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I<sp/>Ap[],</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I<sp/>Aj[],</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>Ax[],</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>Bp[],</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>Bi[],</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>Bx[])</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I<sp/>nnz<sp/>=<sp/>Ap[n_row];</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//compute<sp/>number<sp/>of<sp/>non-zero<sp/>entries<sp/>per<sp/>column<sp/>of<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fill(Bp,<sp/>Bp<sp/>+<sp/>n_col,<sp/>0);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(I<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>nnz;<sp/>n++){</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bp[Aj[n]]++;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cumsum<sp/>the<sp/>nnz<sp/>per<sp/>column<sp/>to<sp/>get<sp/>Bp[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(I<sp/>col<sp/>=<sp/>0,<sp/>cumsum<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>n_col;<sp/>col++){</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>temp<sp/>=<sp/>Bp[col];</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bp[col]<sp/>=<sp/>cumsum;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cumsum<sp/>+=<sp/>temp;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>Bp[n_col]<sp/>=<sp/>nnz;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(I<sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>n_row;<sp/>row++){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(I<sp/>jj<sp/>=<sp/>Ap[row];<sp/>jj<sp/>&lt;<sp/>Ap[row+1];<sp/>jj++){</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>col<sp/>=<sp/>Aj[jj];</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>dest<sp/>=<sp/>Bp[col];</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bi[dest]<sp/>=<sp/>row;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bx[dest]<sp/>=<sp/>Ax[jj];</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bp[col]++;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(I<sp/>col<sp/>=<sp/>0,<sp/>last<sp/>=<sp/>0;<sp/>col<sp/>&lt;=<sp/>n_col;<sp/>col++){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>temp<sp/>=<sp/>Bp[col];</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bp[col]<sp/>=<sp/>last;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>MAT_UTILS_HXX_</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/mzenadi/projects/abcd/include/mat_utils.h"/>
  </compounddef>
</doxygen>
